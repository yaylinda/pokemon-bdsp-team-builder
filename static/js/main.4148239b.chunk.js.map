{"version":3,"sources":["util.ts","pokemonInputSection/OnePokemonInput.tsx","pokemonInputSection/PokemonInputSection.tsx","common.tsx","pokemonTeamResultsSection/PokemonTeamResultsSection.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SERIBII_BASE_URL","getSeribiiTypeImageUrl","type","allTypes","typeWeaknesses","typeEffectivenesses","getPokemonWeakToType","pokemonTeam","filter","pokemon","intersection","types","length","getPokemonWithMovesEffectiveAgainstType","reduce","prev","effectiveMoves","selectedMoves","move","includes","name","OnePokemonInput","index","selectedPokemon","onChangeSelectedPokemon","onChangeSelectedPokemonMove","selectedPokemonNames","pokemonData","selectedMoveNames","useMemo","Set","m","map","selectMovesAutocomplete","move_index","Autocomplete","className","disabled","size","autoHighlight","options","moves","has","getOptionLabel","option","renderOption","props","Box","component","sx","mr","flexShrink","renderInput","params","TextField","label","onChange","event","value","Paper","variant","padding","p","loading","width","src","image_src","alt","height","display","justifyContent","alignItems","Avatar","Array","from","_","Tooltip","title","PokemonInputSection","Grid","container","columns","xs","sm","md","lg","xl","direction","spacing","marginTop","marginBottom","item","VerticalDivider","Divider","flexItem","orientation","marginLeft","marginRight","NoDataText","Typography","PokemonAvatar","PokemonTeamResultsSection","results","pokemonNameMap","renderPokemonWeakToType","pokemonWeakToType","flex","flexDirection","Stack","renderPokemonWithMovesEffectiveAgainstType","pokemonWithMovesEffectiveAgainstType","isEmpty","Object","keys","pokemonName","Chip","avatar","renderPokemonWithMoves","Container","renderResultForType","App","useState","setLoading","setPokemonData","loadingError","setLoadingError","setPokemonTeam","setResults","useEffect","a","fetch","response","json","responseJson","console","error","fetchPokemonData","pokemonMapByName","evaluateTeam","produce","draft","pokemonIndex","moveIndex","pokemonToUpdate","Fragment","AppBar","position","Toolbar","process","backgroundColor","LinearProgress","Alert","severity","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sbAGaA,EAAmB,0BAEnBC,EAAyB,SAACC,GAAD,gBAA0BF,EAA1B,4BAA8DE,EAA9D,SAEzBC,EAA0B,CACnC,SACA,WACA,SACA,SACA,SACA,OACA,MACA,QACA,QACA,OACA,QACA,QACA,WACA,UACA,MACA,SACA,OACA,SAGSC,EAAiC,CAC1C,MAAS,CAAC,SAAU,SACpB,MAAS,CAAC,OAAQ,WAAY,UAC9B,KAAQ,CAAC,WAAY,MAAO,SAC5B,OAAU,CAAC,MAAO,SAAU,SAC5B,MAAS,CAAC,QAAS,QACnB,KAAQ,CAAC,QAAS,QAAS,WAAY,SAAU,SACjD,IAAO,CAAC,OAAQ,SAAU,QAC1B,QAAW,CAAC,MAAO,QAAS,QAC5B,OAAU,CAAC,WAAY,MAAO,QAC9B,OAAU,CAAC,QAAS,MAAO,SAC3B,OAAU,CAAC,SAAU,WACrB,SAAY,CAAC,SAAU,UAAW,SAClC,IAAO,CAAC,OAAQ,WAAY,OAAQ,SACpC,MAAS,CAAC,OAAQ,MAAO,SAAU,SAAU,OAC7C,SAAY,CAAC,UACb,MAAS,CAAC,WAAY,SACtB,KAAQ,CAAC,QAAS,SAAU,QAC5B,OAAU,CAAC,aAGFC,EAAsC,CAC/C,MAAS,CAAC,WAAY,SAAU,QAChC,MAAS,CAAC,MAAO,OAAQ,SACzB,KAAQ,CAAC,QAAS,WAClB,OAAU,CAAC,UACX,MAAS,CAAC,QAAS,WACnB,KAAQ,CAAC,OAAQ,SAAU,MAAO,OAClC,IAAO,CAAC,QAAS,UAAW,QAC5B,QAAW,CAAC,WAAY,UACxB,OAAU,CAAC,QAAS,WAAY,OAChC,OAAU,CAAC,OAAQ,WAAY,SAAU,OAAQ,SACjD,OAAU,CAAC,QAAS,SACpB,SAAY,CAAC,MAAO,SAAU,OAAQ,OAAQ,SAC9C,IAAO,CAAC,QAAS,SAAU,SAAU,UACrC,MAAS,CAAC,QAAS,SAAU,QAC7B,SAAY,CAAC,QAAS,UACtB,MAAS,CAAC,OAAQ,SAAU,QAC5B,KAAQ,CAAC,QAAS,MAAO,MAAO,SAChC,OAAU,IAuBRC,EAAuB,SACzBJ,EACAK,GAFyB,OAGLA,EAAYC,QAChC,SAAAC,GAAO,OAAIC,uBAAaD,EAAQE,MAAON,EAAoBH,IAAOU,WAShEC,EAA0C,SAC5CX,EACAK,GAF4C,OAG3BA,EAAYO,QAAO,SAACC,EAAMN,GAC3C,IAAMO,EAAiBP,EAAQQ,cAC1BT,QAAO,SAAAU,GAAI,OAAa,OAATA,KACfV,QAAO,SAAAU,GAAI,OAAId,EAAeF,GAAMiB,SAASD,EAAMhB,SAExD,OAAKc,GAAmBA,EAAeJ,OAGhC,YAAC,eACDG,GADP,kBAEKN,EAAQW,KAAOJ,IAJT,eAAMD,KAMlB,K,OCoBYM,MArHf,YAO0B,IANtBC,EAMqB,EANrBA,MACAC,EAKqB,EALrBA,gBACAC,EAIqB,EAJrBA,wBACAC,EAGqB,EAHrBA,4BACAC,EAEqB,EAFrBA,qBACAC,EACqB,EADrBA,YAMMC,EAAiCC,mBAAQ,WAC3C,OAAKN,EAIE,IAAIO,IAAIP,EAAgBN,cAAcT,QAAO,SAAAuB,GAAC,OAAU,OAANA,KAAYC,KAAI,SAAAD,GAAC,OAAIA,EAAGX,SAHtE,IAAIU,IAAI,MAIpB,CAACP,IAuDEU,EAA0B,SAACC,GAAD,OAC5B,cAACC,EAAA,EAAD,CACIC,UAAU,0BAEVC,UAAWd,EACXe,KAAK,QACLC,eAAa,EACbC,UAAyB,OAAfjB,QAAe,IAAfA,OAAA,EAAAA,EAAiBkB,QAAS,IAAIjC,QAAO,SAAAuB,GAAC,OAAKH,EAAkBc,IAAIX,EAAEX,SAC7EuB,eAAgB,SAACC,GAAD,OAAYA,EAAOxB,MACnCyB,aAAc,SAACC,EAAOF,GAAR,OACV,cAACG,EAAA,EAAD,yBAAKC,UAAU,KAAKC,GAAI,CAAE,UAAW,CAAEC,GAAI,EAAGC,WAAY,KAAWL,GAArE,aACKF,EAAOxB,SAGhBgC,YAAa,SAACC,GAAD,OAAY,cAACC,EAAA,EAAD,2BAAeD,GAAf,IAAuBE,MAAK,eAAUrB,EAAa,GAAKI,KAAK,YACtFkB,SAAU,SAACC,EAAOC,GAAR,OAAkBjC,EAA4BH,EAAOY,EAAYwB,KAd/E,kBAEoBpC,EAFpB,iBAEkCY,KAgCtC,OACI,eAACyB,EAAA,EAAD,CAAOC,QAAQ,WAAWX,GAAI,CAAEY,QAAS,GAAzC,UAnFI,cAAC1B,EAAA,EAAD,CACII,eAAa,EACbC,QAASb,EAAYnB,QAAO,SAAAsD,GAAC,OAAKpC,EAAqBgB,IAAIoB,EAAE1C,SAC7DkB,KAAK,QACLK,eAAgB,SAACC,GAAD,OAAYA,EAAOxB,MACnCyB,aAAc,SAACC,EAAOF,GAAR,OACV,eAACG,EAAA,EAAD,yBAAKC,UAAU,KAAKC,GAAI,CAAE,UAAW,CAAEC,GAAI,EAAGC,WAAY,KAAWL,GAArE,cACI,qBACIiB,QAAQ,OACRC,MAAM,KACNC,IAAG,UAAKjE,GAAL,OAAwB4C,EAAOsB,WAClCC,IAAKvB,EAAOxB,OAEfwB,EAAOxB,UAGhBgC,YAAa,SAACC,GAAD,OAAY,cAACC,EAAA,EAAD,2BAAeD,GAAf,IAAuBE,MAAK,kBAAajC,EAAQ,GAAKgB,KAAK,YACpFkB,SAAU,SAACC,EAAOC,GAAR,OAAkBlC,EAAwBF,EAAOoC,MAW/D,cAACX,EAAA,EAAD,CAAKC,UAAU,MAAMC,GAAI,CAAEmB,OAAQ,GAAIC,QAAS,OAAQC,eAAgB,SAAUC,WAAY,UAA9F,SAEQhD,EACI,qBACIwC,QAAQ,OACRC,MAAM,KACNC,IAAG,UAAKjE,GAAL,OAAwBuB,EAAgB2C,WAC3CC,IAAI,KACH,cAACK,EAAA,EAAD,CAAQvB,GAAI,CAAEmB,OAAQ,GAAIJ,MAAO,IAAjC,iBAmCrBS,MAAMC,KAAKD,MA5GO,IA6GbzC,KAAI,SAAC2C,EAAGzC,GAAJ,OACAX,EAIDU,EAAwBC,GAHxB,cAAC0C,EAAA,EAAD,CAASC,MAAM,8CAAf,SACK5C,EAAwBC,IAD7B,kBAA6EZ,EAA7E,iBAA2FY,EAA3F,oB,OCnED4C,MAvCf,YAK8B,IAJ1BvE,EAIyB,EAJzBA,YACAiB,EAGyB,EAHzBA,wBACAC,EAEyB,EAFzBA,4BACAE,EACyB,EADzBA,YAMMD,EAAoCG,mBAAQ,kBAAM,IAAIC,IAAIvB,EAAYC,QAAO,SAAAsD,GAAC,OAAU,OAANA,KAAY9B,KAAI,SAAA8B,GAAC,OAAIA,EAAG1C,WAAQ,CAACb,IAEzH,OACI,cAACwE,EAAA,EAAD,CACIC,WAAS,EACTC,QAAS,CAAEC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAC3CC,UAAU,MACVjB,eAAe,SACfC,WAAW,SACXiB,QAAS,EACTvC,GAAI,CAAEwC,UAAW,EAAGC,aAAc,GAPtC,SAUQjB,MAAMC,KAAKD,MAhCD,IAgC2BzC,KAAI,SAAC2C,EAAGrD,GAAJ,OACrC,cAACyD,EAAA,EAAD,CAAMY,MAAI,EAACvD,UAAU,mBAArB,SACI,cAAC,EAAD,CACId,MAAOA,EACPC,gBAAiBhB,EAAYe,GAC7BE,wBAAyBA,EACzBC,4BAA6BA,EAC7BC,qBAAsBA,EACtBC,YAAaA,KAPrB,kBAAwDL,U,kBC7B/DsE,EAAkB,kBAC3B,cAACC,EAAA,EAAD,CACIC,UAAQ,EACRC,YAAY,WACZnC,QAAQ,SACRX,GAAI,CAAE+C,WAAY,EAAGC,YAAa,MAQ7BC,EAAa,kBACtB,cAACC,EAAA,EAAD,CAAYvC,QAAQ,UAAUZ,UAAU,MAAxC,sBAUSoD,EAAgB,SAAC,GAAD,IACzBhF,EADyB,EACzBA,KACA8C,EAFyB,EAEzBA,UAFyB,OAOzB,cAACM,EAAA,EAAD,CACIL,IAAK/C,EACL6C,IAAG,UAAKjE,GAAL,OAAwBkE,MC6FpBmC,MAtHf,YAAiG,IAA5DC,EAA2D,EAA3DA,QAASC,EAAkD,EAAlDA,eAOpCC,EAA0B,SAACC,GAC7B,OACI,eAAC,IAAD,CAAKxD,GAAI,CAAEoB,QAAS,OAAQqC,KAAM,EAAGC,cAAe,UAApD,UACI,cAACR,EAAA,EAAD,CAAYvC,QAAQ,WAAWZ,UAAU,MAAzC,2BAIKyD,EAAkB7F,QAAU6F,EACvB,cAACG,EAAA,EAAD,CAAOrB,UAAU,MAAMC,QAAS,EAAhC,SAAoCiB,EAAkBzE,IAAIoE,KAC1D,cAAC,EAAD,QAyChBS,EAA6C,SAACC,GAChD,OACI,eAAC,IAAD,CAAK7D,GAAI,CAAEoB,QAAS,OAAQqC,KAAM,EAAGC,cAAe,UAApD,UACI,cAACR,EAAA,EAAD,CAAYvC,QAAQ,WAAWZ,UAAU,MAAzC,wBAII+D,kBAAQD,GACF,cAAC,EAAD,IACAE,OAAOC,KAAKH,GAAsC9E,KAAI,SAAAkF,GAGpD,OA3CO,SAAC,GAMzB,IALHzG,EAKE,EALFA,QACAgC,EAIE,EAJFA,MAKA,OACI,eAAC,IAAD,CAAKQ,GAAI,CAAEoB,QAAS,OAAQqC,KAAM,EAAGC,cAAe,MAAOpC,WAAY,UAAvE,UACI,cAAC,EAAD,eAAmB9D,IACnB,cAACmG,EAAA,EAAD,CAAOrB,UAAU,MAAMC,QAAS,EAAhC,SAEQ/C,EAAMT,KAAI,SAAAd,GAAI,OACV,cAACiG,EAAA,EAAD,CAEI7E,KAAK,QACLiB,MAAK,UAAKrC,EAAKE,MACfgG,OAAQ,cAAC5C,EAAA,EAAD,CAAQP,IAAKhE,EAAuBiB,EAAKhB,SAJrD,kBACoBO,EAAQW,KAD5B,iBACyCF,EAAKE,cAN9D,kBAAmGX,EAAQW,KAA3G,gBAmCuBiG,CAAuB,CAAE5G,QAFC8F,EAAeW,GAEPzE,MAD3BqE,EAAqCI,YAyC3E,OACI,cAACI,EAAA,EAAD,CAAWrE,GAAI,CAAEwC,UAAW,GAA5B,SAEQuB,OAAOC,KAAKX,GAAStE,KAAI,SAAA9B,GAAI,OA/Bb,SAACA,GAAuB,IAAD,EAEqBoG,EAAQpG,GAApEuG,EAFuC,EAEvCA,kBAAmBK,EAFoB,EAEpBA,qCAE3B,OACI,cAACnD,EAAA,EAAD,CAAOC,QAAQ,WAAWX,GAAI,CAAEY,QAAS,EAAG6B,aAAc,EAAGrB,QAAS,OAAQsC,cAAe,OAA7F,SACI,eAACC,EAAA,EAAD,CAAOrB,UAAW,CAAEL,GAAI,SAAUC,GAAI,SAAUC,GAAI,OAASnC,GAAI,CAACoB,QAAS,OAAQqC,KAAM,EAAGC,cAAe,OAA3G,UACI,cAAC,IAAD,CAAK1D,GAAI,CAAEoB,QAAS,OAAQE,WAAY,UAAxC,SACI,qBACIR,QAAQ,OACRC,MAAM,KACNC,IAAKhE,EAAuBC,GAC5BiE,IAAKjE,MAIb,cAAC,EAAD,IAEA,eAAC0G,EAAA,EAAD,CAAOrB,UAAW,CAAEL,GAAI,SAAUC,GAAI,SAAUC,GAAI,OAASnC,GAAI,CAAEoB,QAAS,OAAQL,MAAO,QAA3F,UACKwC,EAAwBC,GACzB,cAAC,EAAD,IACCI,EAA2CC,UAhBxD,iBAAqH5G,IA0BhFqH,CAAoBrH,SCmDtDsH,MAnKf,WAAgB,IAAD,EAEmBC,oBAAkB,GAFrC,mBAEJ1D,EAFI,KAEK2D,EAFL,OAG2BD,mBAAoB,IAH/C,mBAGJ9F,EAHI,KAGSgG,EAHT,OAI6BF,mBAAiB,IAJ9C,mBAIJG,EAJI,KAIUC,EAJV,OAS2BJ,mBAAqC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,OAT/F,mBASJlH,EATI,KASSuH,EATT,OAcmBL,mBL2CvBtH,EAASW,QAAO,SAACC,EAAMb,GAAP,mBAAC,eACjBa,GADgB,kBAElBb,EAAO,CACJuG,kBAAmB,GACnBK,qCAAsC,QAE1C,KK/DO,mBAcJR,EAdI,KAcKyB,EAdL,KAmBXC,qBAAU,YACgB,uCAAG,8BAAAC,EAAA,sEAEjBP,GAAW,GACXG,EAAgB,IAHC,SAIMK,MA1BR,2FAsBE,cAIXC,EAJW,gBAKUA,EAASC,OALnB,OAKXC,EALW,OAMjBV,EAAeU,GANE,kDAQjBR,EAAgB,6DAChBS,QAAQC,MAAR,MATiB,yBAWjBb,GAAW,GAXM,6EAAH,qDAetBc,KACD,IAKH,IAAMC,EAAmC5G,mBACrC,kBAAMtB,EACDC,QAAO,SAAAC,GAAO,OAAgB,OAAZA,KAClBK,QAAO,SAACC,EAAMN,GAAP,mBAAC,eACFM,GADC,kBAEHN,EAASW,KAAOX,MACjB,MAAK,CAACF,IAKlByH,qBAAU,WACND,ELsDoB,SAACxH,GACzB,OAAOJ,EAASW,QAAO,SAACC,EAAMb,GAAP,mBAAC,eACjBa,GADgB,kBAElBb,EAAO,CACJuG,kBAAmBnG,EAAqBJ,EAAMK,GAC9CuG,qCAAsCjG,EAAwCX,EAAMK,QAExF,IK7DWmI,CAAanI,EAAYC,QAAO,SAAAC,GAAO,OAAgB,OAAZA,SACvD,CAACF,IAOJ,IAAMiB,EAA0B,SAACF,EAAeb,GAC5CqH,EAAea,YAAQpI,GAAa,SAACqI,GAE7BA,EAAMtH,GADM,OAAZb,EACe,KAEf,2BACOA,GADP,IAEIQ,cAAe,CAAC,KAAM,KAAM,KAAM,aAY5CQ,EAA8B,SAACoH,EAAsBC,EAAmB5H,GAC1E4G,EAAea,YAAQpI,GAAa,SAACqI,GACjC,IAAMG,EAAkBH,EAAMC,GACN,OAApBE,IAIJA,EAAgB9H,cAAc6H,GAAa5H,QA+DnD,OACI,eAAC,IAAM8H,SAAP,WAtDI,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,CAASlG,GAAI,CAAEoB,QAAS,OAAQsC,cAAe,MAAOrC,eAAgB,UAAtE,UACI,cAACE,EAAA,EAAD,CAAQP,IAAG,UAAKmF,6BAAL,iBAA4CnG,GAAI,CAAEoG,gBAAiB,QAASpD,YAAa,KACpG,cAACE,EAAA,EAAD,CAAYvC,QAAQ,KAAKZ,UAAU,MAAnC,sEAGA,cAACwB,EAAA,EAAD,CAAQP,IAAG,UAAKmF,6BAAL,iBAA4CnG,GAAI,CAAEoG,gBAAiB,QAASrD,WAAY,UAqDvGjC,EAfJ,cAACuD,EAAA,EAAD,UACI,cAACgC,EAAA,EAAD,MAhCJ1B,EAEI,cAACN,EAAA,EAAD,UACI,cAACiC,EAAA,EAAD,CAAOC,SAAS,QAAhB,SAAyB5B,MAMjC,eAACN,EAAA,EAAD,WACI,cAAC,EAAD,CACI/G,YAAaA,EACbiB,wBAAyBA,EACzBC,4BAA6BA,EAC7BE,YAAaA,IAGjB,cAACkE,EAAA,EAAD,UACI,cAACsB,EAAA,EAAD,CAAM5D,MAAM,UAAUkG,MAAM,UAAU7F,QAAQ,eAGlD,cAAC,EAAD,CACI0C,QAASA,EACTC,eAAgBkC,WCzIrBiB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4148239b.chunk.js","sourcesContent":["import { intersection } from 'lodash';\nimport { PokemonMoveMap, PokemonTeamEvaluationResults, PokemonType, PokemonTypeMap, SelectedPokemon } from \"./types\";\n\nexport const SERIBII_BASE_URL = 'https://www.serebii.net';\n\nexport const getSeribiiTypeImageUrl = (type: PokemonType) => `${SERIBII_BASE_URL}/pokedex-bw/type/${type}.gif`;\n\nexport const allTypes: PokemonType[] = [\n    'normal',\n    'fighting',\n    'flying',\n    'poison',\n    'ground',\n    'rock',\n    'bug',\n    'ghost',\n    'steel',\n    'fire',\n    'water',\n    'grass',\n    'electric',\n    'psychic',\n    'ice',\n    'dragon',\n    'dark',\n    'fairy',\n];\n\nexport const typeWeaknesses: PokemonTypeMap = {\n    'fairy': ['poison', 'steel'],\n    'steel': ['fire', 'fighting', 'ground'],\n    'dark': ['fighting', 'bug', 'fairy'],\n    'dragon': ['ice', 'dragon', 'fairy'],\n    'ghost': ['ghost', 'dark'],\n    'rock': ['water', 'grass', 'fighting', 'ground', 'steel'],\n    'bug': ['fire', 'flying', 'rock'],\n    'psychic': ['bug', 'ghost', 'dark'],\n    'flying': ['electric', 'ice', 'rock'],\n    'ground': ['water', 'ice', 'grass'],\n    'poison': ['ground', 'psychic'],\n    'fighting': ['flying', 'psychic', 'fairy'],\n    'ice': ['fire', 'fighting', 'rock', 'steel'],\n    'grass': ['fire', 'ice', 'poison', 'flying', 'bug'],\n    'electric': ['ground'],\n    'water': ['electric', 'grass'],\n    'fire': ['water', 'ground', 'rock'],\n    'normal': ['fighting'],\n};\n\nexport const typeEffectivenesses: PokemonTypeMap = {\n    'fairy': ['fighting', 'dragon', 'dark'],\n    'steel': ['ice', 'rock', 'fairy'],\n    'dark': ['ghost', 'psychic'],\n    'dragon': ['dragon'],\n    'ghost': ['ghost', 'psychic'],\n    'rock': ['fire', 'flying', 'ice', 'bug'],\n    'bug': ['grass', 'psychic', 'dark'],\n    'psychic': ['fighting', 'poison'],\n    'flying': ['grass', 'fighting', 'bug'],\n    'ground': ['fire', 'electric', 'poison', 'rock', 'steel'],\n    'poison': ['grass', 'fairy'],\n    'fighting': ['ice', 'normal', 'rock', 'dark', 'steel',],\n    'ice': ['grass', 'ground', 'flying', 'dragon'],\n    'grass': ['water', 'ground', 'rock'],\n    'electric': ['water', 'flying'],\n    'water': ['fire', 'ground', 'rock'],\n    'fire': ['grass', 'ice', 'bug', 'steel'],\n    'normal': [],\n};\n\n/**\n * \n * @returns \n */\nexport const initializePokemonTeamEvaluationResults = (): PokemonTeamEvaluationResults => {\n    return allTypes.reduce((prev, type) => ({\n        ...prev,\n        [type]: {\n            pokemonWeakToType: [],\n            pokemonWithMovesEffectiveAgainstType: {},\n        },\n    }), {});\n}\n\n/**\n * \n * @param type \n * @param pokemonTeam \n * @returns \n */\nconst getPokemonWeakToType = (\n    type: PokemonType,\n    pokemonTeam: SelectedPokemon[],\n): SelectedPokemon[] => pokemonTeam.filter(\n    pokemon => intersection(pokemon.types, typeEffectivenesses[type]).length\n);\n\n/**\n * \n * @param type \n * @param pokemonTeam \n * @returns \n */\nconst getPokemonWithMovesEffectiveAgainstType = (\n    type: PokemonType,\n    pokemonTeam: SelectedPokemon[],\n): PokemonMoveMap => pokemonTeam.reduce((prev, pokemon) => {\n    const effectiveMoves = pokemon.selectedMoves\n        .filter(move => move !== null)\n        .filter(move => typeWeaknesses[type].includes(move!.type));\n\n    if (!effectiveMoves || !effectiveMoves.length) {\n        return ({ ...prev });\n    }\n    return ({\n        ...prev,\n        [pokemon.name]: effectiveMoves,\n    });\n}, {});\n\n/**\n * \n * @param pokemonTeam \n * @returns \n */\nexport const evaluateTeam = (pokemonTeam: SelectedPokemon[]): PokemonTeamEvaluationResults => {\n    return allTypes.reduce((prev, type) => ({\n        ...prev,\n        [type]: {\n            pokemonWeakToType: getPokemonWeakToType(type, pokemonTeam),\n            pokemonWithMovesEffectiveAgainstType: getPokemonWithMovesEffectiveAgainstType(type, pokemonTeam),\n        },\n    }), {});\n}","import Autocomplete from '@mui/material/Autocomplete';\nimport Avatar from '@mui/material/Avatar';\nimport Paper from '@mui/material/Paper';\nimport TextField from '@mui/material/TextField';\nimport Tooltip from '@mui/material/Tooltip';\nimport Box from '@mui/system/Box';\nimport React, { useMemo } from 'react';\nimport { Pokemon, PokemonMove, SelectedPokemon } from '../types';\nimport { SERIBII_BASE_URL } from '../util';\n\nconst NUM_ALLOWED_MOVES = 4;\n\nexport interface OnePokemonInputProps {\n    index: number;\n    selectedPokemon: SelectedPokemon | null;\n    onChangeSelectedPokemon: (index: number, pokemon: Pokemon | null) => void;\n    onChangeSelectedPokemonMove: (pokemon_index: number, move_index: number, move: PokemonMove | null) => void,\n    selectedPokemonNames: Set<string>,\n    pokemonData: Pokemon[],\n}\n\nfunction OnePokemonInput({\n    index,\n    selectedPokemon,\n    onChangeSelectedPokemon,\n    onChangeSelectedPokemonMove,\n    selectedPokemonNames,\n    pokemonData\n}: OnePokemonInputProps) {\n\n    /**\n     * \n     */\n    const selectedMoveNames: Set<string> = useMemo(() => {\n        if (!selectedPokemon) {\n            return new Set([]);\n        }\n\n        return new Set(selectedPokemon.selectedMoves.filter(m => m !== null).map(m => m!.name));\n    }, [selectedPokemon]);\n\n    /**\n     * \n     * @returns \n     */\n    const renderSelectPokemonInput = () => {\n        return (\n            <Autocomplete\n                autoHighlight\n                options={pokemonData.filter(p => !selectedPokemonNames.has(p.name))}\n                size=\"small\"\n                getOptionLabel={(option) => option.name}\n                renderOption={(props, option) => (\n                    <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\n                        <img\n                            loading=\"lazy\"\n                            width=\"20\"\n                            src={`${SERIBII_BASE_URL}${option.image_src}`}\n                            alt={option.name}\n                        />\n                        {option.name}\n                    </Box>\n                )}\n                renderInput={(params) => <TextField {...params} label={`Pokemon ${index + 1}`} size=\"small\" />}\n                onChange={(event, value) => onChangeSelectedPokemon(index, value)}\n            />\n        );\n    }\n\n    /**\n     * \n     * @returns \n     */\n    const renderSelectedPokemon = () => {\n        return (\n            <Box component=\"div\" sx={{ height: 80, display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                {\n                    selectedPokemon ?\n                        <img\n                            loading=\"lazy\"\n                            width=\"60\"\n                            src={`${SERIBII_BASE_URL}${selectedPokemon.image_src}`}\n                            alt=\"\"\n                        /> : <Avatar sx={{ height: 60, width: 60 }}>?</Avatar>\n                }\n            </Box>\n        );\n    }\n\n    /**\n     * \n     * @param move_index \n     * @returns \n     */\n    const selectMovesAutocomplete = (move_index: number) => (\n        <Autocomplete\n            className=\"PokemonMoveAutocomplete\"\n            key={`pokemon_${index}_move_${move_index}`}\n            disabled={!selectedPokemon}\n            size=\"small\"\n            autoHighlight\n            options={(selectedPokemon?.moves || []).filter(m => !selectedMoveNames.has(m.name))}\n            getOptionLabel={(option) => option.name}\n            renderOption={(props, option) => (\n                <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\n                    {option.name}\n                </Box>\n            )}\n            renderInput={(params) => <TextField {...params} label={`Move ${move_index + 1}`} size=\"small\" />}\n            onChange={(event, value) => onChangeSelectedPokemonMove(index, move_index, value)}\n        />\n    );\n\n    /**\n     * \n     * @returns \n     */\n    const renderSelectPokemonMoves = () => \n        Array.from(Array(NUM_ALLOWED_MOVES))\n            .map((_, move_index) => \n                !selectedPokemon ? \n                <Tooltip title=\"Select a Pokemon before selecting its moves\" key={`pokemon_${index}_move_${move_index}_tooltip`}>\n                    {selectMovesAutocomplete(move_index)}\n                </Tooltip> : \n                selectMovesAutocomplete(move_index));\n\n    /**\n     * \n     */\n    return (\n        <Paper variant=\"outlined\" sx={{ padding: 2 }}>\n            {renderSelectPokemonInput()}\n            {renderSelectedPokemon()}\n            {renderSelectPokemonMoves()}\n        </Paper>\n    );\n}\n\nexport default OnePokemonInput;","import Grid from '@mui/material/Grid';\nimport React, { useMemo } from 'react';\nimport { Pokemon, PokemonMove, SelectedPokemon } from '../types';\nimport OnePokemonInput from './OnePokemonInput';\nimport '../App.css';\n\nconst POKEMON_TEAM_SIZE = 6;\n\nexport interface PokemonInputSectionProps {\n    pokemonTeam: (SelectedPokemon | null)[],\n    onChangeSelectedPokemon: (index: number, pokemon: Pokemon | null) => void,\n    onChangeSelectedPokemonMove: (pokemon_index: number, move_index: number, move: PokemonMove | null) => void,\n    pokemonData: Pokemon[],\n}\n\nfunction PokemonInputSection({\n    pokemonTeam,\n    onChangeSelectedPokemon,\n    onChangeSelectedPokemonMove,\n    pokemonData\n}: PokemonInputSectionProps) {\n\n    /**\n     * \n     */\n    const selectedPokemonNames: Set<string> = useMemo(() => new Set(pokemonTeam.filter(p => p !== null).map(p => p!.name)), [pokemonTeam]);\n\n    return (\n        <Grid\n            container\n            columns={{ xs: 1, sm: 2, md: 3, lg: 3, xl: 6 }}\n            direction=\"row\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            spacing={4}\n            sx={{ marginTop: 1, marginBottom: 4 }}\n        >\n            {\n                Array.from(Array(POKEMON_TEAM_SIZE)).map((_, index) =>\n                    <Grid item className=\"PokemonInputCard\" key={`pokemon_${index}`}>\n                        <OnePokemonInput\n                            index={index}\n                            selectedPokemon={pokemonTeam[index]}\n                            onChangeSelectedPokemon={onChangeSelectedPokemon}\n                            onChangeSelectedPokemonMove={onChangeSelectedPokemonMove}\n                            selectedPokemonNames={selectedPokemonNames}\n                            pokemonData={pokemonData}\n                        />\n                    </Grid>)\n            }\n        </Grid>\n    );\n}\n\nexport default PokemonInputSection;","import Avatar from '@mui/material/Avatar';\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\nimport React from 'react';\nimport { SERIBII_BASE_URL } from './util';\n\n/**\n * \n * @returns \n */\nexport const VerticalDivider = () => (\n    <Divider\n        flexItem\n        orientation=\"vertical\"\n        variant=\"middle\"\n        sx={{ marginLeft: 2, marginRight: 2 }}\n    />\n);\n\n/**\n * \n * @returns \n */\nexport const NoDataText = () => (\n    <Typography variant=\"caption\" component=\"div\">\n        No data\n    </Typography>\n);\n\n/**\n * \n * @param param0 \n * @returns \n */\nexport const PokemonAvatar = ({\n    name,\n    image_src,\n}: {\n    name: string,\n    image_src: string,\n}) => (\n    <Avatar\n        alt={name}\n        src={`${SERIBII_BASE_URL}${image_src}`}\n    />\n);","import Avatar from '@mui/material/Avatar';\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Container from '@mui/material/Container';\nimport Paper from '@mui/material/Paper';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport { isEmpty } from 'lodash';\nimport React from 'react';\nimport { NoDataText, PokemonAvatar, VerticalDivider } from '../common';\nimport { PokemonMove, PokemonMoveMap, PokemonNameMap, PokemonTeamEvaluationResults, PokemonType, SelectedPokemon } from '../types';\nimport { getSeribiiTypeImageUrl } from '../util';\n\nexport interface PokemonTeamResultsSectionProps {\n    results: PokemonTeamEvaluationResults,\n    pokemonNameMap: PokemonNameMap,\n}\n\nfunction PokemonTeamResultsSection({ results, pokemonNameMap }: PokemonTeamResultsSectionProps) {\n\n    /**\n     * \n     * @param pokemonWeakToType \n     * @returns \n     */\n    const renderPokemonWeakToType = (pokemonWeakToType: SelectedPokemon[]) => {\n        return (\n            <Box sx={{ display: 'flex', flex: 1, flexDirection: 'column' }}>\n                <Typography variant=\"overline\" component=\"div\">\n                    Disadvantages\n                </Typography>\n                {\n                    (pokemonWeakToType.length && pokemonWeakToType)\n                        ? <Stack direction=\"row\" spacing={1}>{pokemonWeakToType.map(PokemonAvatar)}</Stack>\n                        : <NoDataText />\n                }\n            </Box>\n        );\n    }\n\n    /**\n     * \n     * @param param0 \n     */\n    const renderPokemonWithMoves = ({\n        pokemon,\n        moves,\n    }: {\n        pokemon: SelectedPokemon,\n        moves: PokemonMove[],\n    }) => {\n        return (\n            <Box sx={{ display: 'flex', flex: 1, flexDirection: 'row', alignItems: 'center' }} key={`pokemon_${pokemon.name}_with_moves`}>\n                <PokemonAvatar {...pokemon} />\n                <Stack direction=\"row\" spacing={1}>\n                    {\n                        moves.map(move => (\n                            <Chip\n                                key={`pokemon_${pokemon.name}_move_${move.name}`}\n                                size=\"small\"\n                                label={`${move.name}`}\n                                avatar={<Avatar src={getSeribiiTypeImageUrl(move.type)} />}\n                            />\n                        ))\n                    }\n                </Stack>\n            </Box>\n        );\n    };\n\n    /**\n     * \n     * @param pokemonWithMovesEffectiveAgainstType \n     * @returns \n     */\n    const renderPokemonWithMovesEffectiveAgainstType = (pokemonWithMovesEffectiveAgainstType: PokemonMoveMap) => {\n        return (\n            <Box sx={{ display: 'flex', flex: 1, flexDirection: 'column' }}>\n                <Typography variant=\"overline\" component=\"div\">\n                    Advantages\n                </Typography>\n                {\n                    isEmpty(pokemonWithMovesEffectiveAgainstType)\n                        ? <NoDataText />\n                        : Object.keys(pokemonWithMovesEffectiveAgainstType).map(pokemonName => {\n                            const pokemon: SelectedPokemon = pokemonNameMap[pokemonName];\n                            const moves = pokemonWithMovesEffectiveAgainstType[pokemonName];\n                            return renderPokemonWithMoves({ pokemon, moves });\n                        })\n                }\n            </Box>\n        );\n    }\n\n    /**\n     * \n     * @param type \n     * @returns \n     */\n    const renderResultForType = (type: PokemonType) => {\n\n        const { pokemonWeakToType, pokemonWithMovesEffectiveAgainstType } = results[type];\n\n        return (\n            <Paper variant=\"outlined\" sx={{ padding: 2, marginBottom: 2, display: 'flex', flexDirection: 'row' }} key={`result_${type}`}>\n                <Stack direction={{ xs: 'column', sm: 'column', md: 'row' }} sx={{display: 'flex', flex: 1, flexDirection: 'row' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <img\n                            loading=\"lazy\"\n                            width=\"40\"\n                            src={getSeribiiTypeImageUrl(type)}\n                            alt={type}\n                        />\n                    </Box>\n\n                    <VerticalDivider />\n\n                    <Stack direction={{ xs: 'column', sm: 'column', md: 'row' }} sx={{ display: 'flex', width: '100%' }}>\n                        {renderPokemonWeakToType(pokemonWeakToType)}\n                        <VerticalDivider />\n                        {renderPokemonWithMovesEffectiveAgainstType(pokemonWithMovesEffectiveAgainstType)}\n                    </Stack>\n                </Stack>\n            </Paper>\n        );\n    }\n\n    return (\n        <Container sx={{ marginTop: 4 }}>\n            {\n                Object.keys(results).map(type => renderResultForType(type as PokemonType))\n            }\n        </Container>\n    );\n}\n\nexport default PokemonTeamResultsSection;\n","import Alert from '@mui/material/Alert';\nimport AppBar from '@mui/material/AppBar';\nimport Avatar from '@mui/material/Avatar';\nimport Chip from '@mui/material/Chip';\nimport Container from '@mui/material/Container';\nimport Divider from '@mui/material/Divider';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport produce from 'immer';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport PokemonInputSection from './pokemonInputSection/PokemonInputSection';\nimport PokemonTeamResultsSection from './pokemonTeamResultsSection/PokemonTeamResultsSection';\nimport { Pokemon, PokemonMove, PokemonNameMap, PokemonTeamEvaluationResults, SelectedPokemon } from './types';\nimport { evaluateTeam, initializePokemonTeamEvaluationResults } from './util';\n\nconst BDSP_POKEMON_DATA_JSON = 'https://raw.githubusercontent.com/yaylinda/serebii-parser/master/data/pokedex-bdsp.json';\n\nfunction App() {\n\n    const [loading, setLoading] = useState<boolean>(true);\n    const [pokemonData, setPokemonData] = useState<Pokemon[]>([]);\n    const [loadingError, setLoadingError] = useState<string>('');\n\n    /**\n     * \n     */\n    const [pokemonTeam, setPokemonTeam] = useState<(SelectedPokemon | null)[]>([null, null, null, null, null, null]);\n\n    /**\n     * \n     */\n    const [results, setResults] = useState<PokemonTeamEvaluationResults>(initializePokemonTeamEvaluationResults());\n\n    /**\n     * \n     */\n    useEffect(() => {\n        const fetchPokemonData = async () => {\n            try {\n                setLoading(false);\n                setLoadingError('');\n                const response = await fetch(BDSP_POKEMON_DATA_JSON);\n                const responseJson = await response.json();\n                setPokemonData(responseJson as Pokemon[]);\n            } catch (error) {\n                setLoadingError(`Error fetching BDSP Pokemon Data. Please try again later.`);\n                console.error(error);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchPokemonData();\n    }, []);\n\n    /**\n     * \n     */\n    const pokemonMapByName: PokemonNameMap = useMemo(\n        () => pokemonTeam\n            .filter(pokemon => pokemon !== null)\n            .reduce((prev, pokemon) => ({\n                ...prev,\n                [pokemon!.name]: pokemon,\n            }), {}), [pokemonTeam]);\n\n    /**\n     * \n     */\n    useEffect(() => {\n        setResults(evaluateTeam(pokemonTeam.filter(pokemon => pokemon !== null) as SelectedPokemon[]));\n    }, [pokemonTeam]);\n\n    /**\n     * \n     * @param index \n     * @param pokemon \n     */\n    const onChangeSelectedPokemon = (index: number, pokemon: Pokemon | null) => {\n        setPokemonTeam(produce(pokemonTeam, (draft) => {\n            if (pokemon === null) {\n                draft[index] = null;\n            } else {\n                draft[index] = {\n                    ...pokemon,\n                    selectedMoves: [null, null, null, null],\n                };\n            }\n        }));\n    }\n\n    /**\n     * \n     * @param pokemonIndex \n     * @param moveIndex \n     * @param move \n     */\n    const onChangeSelectedPokemonMove = (pokemonIndex: number, moveIndex: number, move: PokemonMove | null) => {\n        setPokemonTeam(produce(pokemonTeam, (draft) => {\n            const pokemonToUpdate = draft[pokemonIndex];\n            if (pokemonToUpdate === null) {\n                return;\n            }\n\n            pokemonToUpdate.selectedMoves[moveIndex] = move;\n        }));\n    }\n\n    /**\n     * \n     * @returns \n     */\n    const renderHeaderBar = () => {\n        return (\n            <AppBar position=\"static\">\n                <Toolbar sx={{ display: 'flex', flexDirection: 'row', justifyContent: 'center' }}>\n                    <Avatar src={`${process.env.PUBLIC_URL}/pokeball.png`} sx={{ backgroundColor: 'white', marginRight: 2 }} />\n                    <Typography variant=\"h6\" component=\"div\">\n                        Pokemon Brilliant Diamond and Shining Pearl Team Builder\n                    </Typography>\n                    <Avatar src={`${process.env.PUBLIC_URL}/pokeball.png`} sx={{ backgroundColor: 'white', marginLeft: 2 }} />\n                </Toolbar>\n            </AppBar>\n        );\n    }\n\n    const renderContent = () => {\n        if (loadingError) {\n            return (\n                <Container>\n                    <Alert severity=\"error\">{loadingError}</Alert>\n                </Container>\n            );\n        }\n\n        return (\n            <Container>\n                <PokemonInputSection\n                    pokemonTeam={pokemonTeam}\n                    onChangeSelectedPokemon={onChangeSelectedPokemon}\n                    onChangeSelectedPokemonMove={onChangeSelectedPokemonMove}\n                    pokemonData={pokemonData}\n                />\n\n                <Divider>\n                    <Chip label=\"RESULTS\" color=\"primary\" variant=\"outlined\" />\n                </Divider>\n\n                <PokemonTeamResultsSection\n                    results={results}\n                    pokemonNameMap={pokemonMapByName}\n                />\n            </Container>\n        );\n    }\n\n    const renderLoading = () => {\n        return (\n            <Container>\n                <LinearProgress />\n            </Container>\n        )\n    }\n\n    /**\n     * \n     */\n    return (\n        <React.Fragment>\n\n            {renderHeaderBar()}\n\n            {\n                loading ? renderLoading() : renderContent()\n            }\n\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}